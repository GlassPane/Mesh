import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.google.gson.*
import net.fabricmc.loom.task.RemapJarTask
import com.modrinth.minotaur.TaskModrinthUpload

import java.nio.charset.StandardCharsets
import java.time.Year

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.google.code.gson:gson:2.8.6"
    }
}

plugins {
    id "fabric-loom" version "0.5-SNAPSHOT"
    id "net.minecrell.licenser" version "0.4.1"
    id "maven-publish"
    id "java-library"
    id "org.inferred.processors" version "3.3.0"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "com.modrinth.minotaur" version "1.1.0"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

def ENV = System.getenv()
def buildTime = ENV.BUILD_TIME ?: new Date().format('yyyyMMddHHmmss')

group = "io.github.GlassPane"
archivesBaseName = "Mesh"

boolean isPreviewBuild = !ENV.TAG || ENV.TAG.matches(".+-.+")
def buildNumber = !ENV.TAG ? ((ENV.BUILD_NUMBER ? "build.${ENV.BUILD_NUMBER}" : buildTime) + "-") : ""
def buildMeta = isPreviewBuild ? "+${buildNumber}${project.minecraft_version}" : ""
version = "${ENV.TAG ?: "development"}${buildMeta}"

minecraft {
    accessWidener = file("src/main/resources/mesh.accesswidener")
}

configurations {
    annotations
    annotationsInclude
    annotationsDependency
}

sourceSets {
    annotations {
        java {
            compileClasspath += configurations.annotationsDependency
            runtimeClasspath += configurations.annotationsDependency
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
    maven {
        name = "FabricMC"
        url = "https://maven.fabricmc.net"
    }
    maven {
        name = "Ladysnake Libs"
        url = "https://dl.bintray.com/ladysnake/libs"
    }
    maven {
        name = "SonaType SNAPSHOTS"
        url = "http://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

String[] apiModules = [
        "fabric-api-base",
        "fabric-blockrenderlayer-v1",
        "fabric-command-api-v1",
        "fabric-crash-report-info-v1",
        //"fabric-dimensions-v1", //FIXME currently broken
        "fabric-item-groups-v0",
        "fabric-lifecycle-events-v1",
        "fabric-networking-blockentity-v0",
        "fabric-networking-v0", // TODO: Use networking v1 when released
        "fabric-registry-sync-v0",
        "fabric-resource-loader-v0"
]

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_mappings}:v2"
    //needed to get nullability checks for MC source, otherwise using jetbrains annotations
    compileOnly "org.jetbrains:annotations:20.1.0"
    modApi "net.fabricmc:fabric-loader:${project.loader_version}"

    apiModules.each {
        modApi include(fabricApi.module(it, project.fabric_version))
    }
    api include("me.zeroeightsix:fiber:${project.fiber_version}")
    modImplementation(include("me.shedaniel.cloth:config-2:${project.cloth_version}")) {
        exclude group: 'net.fabricmc.fabric-api'
    }
    modImplementation(include("me.shedaniel.cloth:fiber2cloth:${project.fiber2cloth_version}")) {
        exclude group: 'net.fabricmc.fabric-api'
    }
    modImplementation("io.github.prospector:modmenu:${project.modmenu_version}") {
        exclude group: 'net.fabricmc.fabric-api'
    }

    annotationProcessor project(path: ":", configuration: "annotations")

    //testing
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.0-RC1"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.7.0-RC1"

    // dependencies for the annotation processor submodule
    annotationsDependency annotationsInclude("com.google.code.gson:gson:2.8.6")

    // speed up loading of the dev client by disabling DFU
    modRuntime("com.github.SuperCoder7979:databreaker:${project.databreaker_version}") {
        exclude module: "fabric-loader"
    }
}

task annotationsJar(type: ShadowJar) {
    archiveAppendix.set("Annotations")
    from("LICENSE.md") {
        rename { "LICENSE_${archiveBaseName.get()}-${archiveAppendix.get()}" }
    }
    from sourceSets.annotations.output
    from(sourceSets.annotations.resources) {
        include "META-INF/services/**"
    }
    configurations = [project.configurations.annotationsInclude]

}

task apiJar(type: Jar, dependsOn: classes) {
    archiveAppendix.set("API")
    from(sourceSets.main.output) {
        include String.valueOf(findProperty("api_package")).replace('.', '/') + "/**"
    }
    from("LICENSE.md") {
        rename { "LICENSE_${archiveBaseName.get()}-${archiveAppendix.get()}" }
    }
    from(sourceSets.main.resources) {
        inputs.property "version", project.version
        include 'api/**'
        expand "version": project.version
    }
    eachFile {
        if(it.path.startsWith("api/")) {
            it.path = it.path.substring(4)
        }
    }
    includeEmptyDirs false
    manifest.mainAttributes(
            "Implementation-Title": project.archivesBaseName + "-API",
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:api".toLowerCase(Locale.ROOT),
            "Built-On-Minecraft": project.minecraft_version,
            "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
    )
    archiveClassifier.set("dev")
}

task remapApiJar(type: RemapJarTask, dependsOn: apiJar) {
    input.set(apiJar.archiveFile.get())
    addNestedDependencies.set(false)
    archiveAppendix.set("API")
}

jar {
    dependsOn remapApiJar
    afterEvaluate {
        from(remapApiJar.archiveFile) {
            into "META-INF/jars"
        }
    }
    exclude String.valueOf(findProperty("api_package")).replace('.', '/') + "/**"
    exclude "api/**"

    from ("LICENSE.md") {
        rename { "LICENSE_${archiveBaseName.get()}" }
    }

    manifest.mainAttributes(
            "Implementation-Title": project.archivesBaseName,
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}".toLowerCase(Locale.ROOT),
            "Built-On-Minecraft": project.minecraft_version,
            "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
    )
}

processResources {
    // this will ensure that this task is redone when there's a change
    inputs.property "version", project.version
    inputs.property "fabric_version", project.fabric_version
    inputs.property "api_jar", remapApiJar.archiveFileName.get()
    inputs.property "fabric_api_modules", apiModules

    filteringCharset = "UTF-8"
    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"

        // add mod metadata
        expand "version": project.version
    }

    // copy everything else, that's not the fabric.mod.json
    from(sourceSets.main.resources.srcDirs) {
        include "**/*.mcmeta"
        include "**/*.json"
        exclude "fabric.mod.json"
    }

    doLast {
        Gson gson = new GsonBuilder().disableHtmlEscaping().create()

        // Minify json resources
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
            def element = gson.fromJson(file.text, JsonElement.class) //verify json integrity
            if (file.name == "fabric.mod.json") {
                def obj = element.getAsJsonObject()
                if (obj.has("recommends")) {
                    obj.getAsJsonObject("recommends").addProperty("fabric", "^${fabric_version}")
                }
                if(gradle.taskGraph.hasTask(remapApiJar as Task)) {
                    def depends = obj.getAsJsonObject("depends") ?: new JsonObject()
                    depends.addProperty("mesh_api", "${project.version}")
                    apiModules.each {
                        depends.addProperty(it, "*")
                    }
                    if (!depends.keySet().isEmpty()) {
                        obj.add("depends", depends)
                    }

                    def jarsArray = obj.getAsJsonArray("jars") ?: new JsonArray()
                    def apiJarObject = new JsonObject()
                    apiJarObject.addProperty("file", "META-INF/jars/${remapApiJar.archiveFileName.get()}")
                    jarsArray.add(apiJarObject)
                    obj.add("jars", jarsArray)
                }
            }
            file.text = gson.toJson(element)
        }
    }

    rename '(.+).accesswidener', 'META-INF/$1.aww'
}

license {
    header = file("code_quality/${project.license_header}_HEADER.txt")
    // Apply licenses only to main source set
    sourceSets = [sourceSets.main]
    include "**/*.java"
    charset = StandardCharsets.UTF_8.name()

    //FIXME style block is broken
    //see https://github.com/Minecrell/licenser/issues/10
    //style {
    //    java = "BLOCK_COMMENT"
    //}
    newLine = false // remove the empty line between header and package name
    //ignoreFailures = true //Ignore failures and only print a warning on license violations

    //export variables
    ext {
        year = Year.now()
        projectDisplayName = project.archivesBaseName
    }
}

artifacts {
    archives (jar) {
        builtBy remapJar
    }
    archives (apiJar) {
        builtBy remapApiJar
    }
    archives annotationsJar
    annotations annotationsJar
}

publishing {
    publications {
        mainJava(MavenPublication) {
            artifact(remapJar)
        }
        apiJava(MavenPublication) {
            artifact(remapApiJar)
            artifactId = "${remapApiJar.archiveBaseName.get()}-${remapApiJar.archiveAppendix.get()}"
        }
        annotationsJava(MavenPublication) {
            artifact(annotationsJar)
            artifactId = "${annotationsJar.archiveBaseName.get()}-${annotationsJar.archiveAppendix.get()}"
        }
    }

    repositories {
        if(ENV.MAVEN_UPLOAD_URL) {
            maven {
                url = ENV.MAVEN_UPLOAD_URL
                credentials {
                    username = ENV.MAVEN_UPLOAD_USER
                    password = ENV.MAVEN_UPLOAD_PASSWORD
                }
            }
        }
    }
}

task publishToModrinth(type: TaskModrinthUpload, dependsOn: assemble) {
    if(ENV.MODRINTH_TOKEN) {
        token = ENV.MODRINTH_TOKEN
    }
    projectId = project.modrinth_id
    uploadFile = remapJar
    versionNumber = ENV.TAG ?: version
    releaseType = isPreviewBuild ? ((ENV.TAG && ENV.TAG.contains("-beta")) ? "beta" : "alpha") : "release"
    "${project.modrinth_game_versions}".split(";").each {
        addGameVersion(it)
    }
    addLoader("Fabric")
}

if (ENV.MODRINTH_TOKEN) {
    tasks.publish.dependsOn(publishToModrinth)
}


test {
    useJUnitPlatform()
}
