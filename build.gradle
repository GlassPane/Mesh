import com.google.gson.*
import net.fabricmc.loom.task.RemapJar

import java.nio.charset.StandardCharsets
import java.time.Year

plugins {
    id "fabric-loom" version "0.2.1-SNAPSHOT"
    id "net.minecrell.licenser" version "0.2.1"
    id "com.matthewprenger.cursegradle" version "1.1.2"
    id "maven-publish"
    //id 'com.github.johnrengelman.shadow' version '4.0.4'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

group = "com.github.GlassPane"
archivesBaseName = "Mesh"
version = System.getenv("TRAVIS_TAG") ?: project.mod_version

apply from: "https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/basic_project.gradle"
//apply from: "https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/dependencies/${minecraft_version}/development_suite.gradle"

repositories {
    maven {
        name = "FabricMC"
        url = "https://maven.fabricmc.net"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${minecraft_version}+build.${yarn_mappings}"
    modCompile "net.fabricmc:fabric-loader:${loader_version}"

    //optional dependency!
    modCompile "net.fabricmc:fabric:${fabric_version}"
}

task apiJar(type: Jar, dependsOn: classes) {
    onlyIf {
        project.hasProperty("api_package")
    }
    //TODO waiting on Loom 0.3.0
    from(sourceSets.main.output) {
        //from(sourceSets.main.allJava) {
        include String.valueOf(findProperty("api_package")).replace('.', '/') + "/**"
    }
    from "LICENSE.md"
    manifest.mainAttributes(
            "Implementation-Title": project.archivesBaseName + "-api",
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${project.name}:${project.version}:api".toLowerCase(Locale.ROOT),
            "Built-On-Minecraft": project.minecraft_version,
            "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
    )
    classifier = "api"
}

task remapApiJar(type: RemapJar, dependsOn: apiJar) {
    onlyIf {
        project.hasProperty("api_package")
    }
    jar = apiJar.archiveFile.get().asFile
}

if(project.hasProperty("api_package")) {
    def apiJarTask = project.tasks.getByName("apiJar")
    apiJarTask.with {
        include "api.fabric.mod.json"
        rename "api\\.fabric\\.mod\\.json", "fabric.mod.json"
    }
}

jar {
    if (project.hasProperty("api_package")) {
        def apiJarTask = project.tasks.getByName("apiJar")
        dependsOn apiJarTask

        from(apiJarTask.archiveFile) {
            into "META-INF/libraries"
        }

        exclude String.valueOf(findProperty("api_package")).replace('.', '/') + "/**"
        exclude "api.fabric.mod.json"
    }
}

processResources {
    // this will ensure that this task is redone when there's a change
    inputs.property "version", project.version

    // replace stuff in fabric.mod.json, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        include "api.fabric.mod.json"

        // add mod metadata
        expand "version": project.version
    }

    // copy everything else, that's not the fabric.mod.json
    from(sourceSets.main.resources.srcDirs) {
        include "**/*.mcmeta"
        include "**/*.json"
        exclude "fabric.mod.json"
        exclude "api.fabric.mod.json"
    }

    doLast {
        Gson gson = new GsonBuilder().create()
        JsonParser parser = new JsonParser()

        // Minify json resources
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
            JsonElement content = parser.parse(file.text)
            if(file.name == "fabric.mod.json") {
                JsonObject obj = content.getAsJsonObject()
                if(obj.has("recommends")) {
                    obj.getAsJsonObject("recommends").addProperty("fabric", "^${fabric_version}")
                }
                if(obj.has("depends")) {
                    obj.getAsJsonObject("depends").addProperty("mesh_api", "^${project.version}")
                }
                if(project.hasProperty("api_package")) {
                    JsonArray jarsArray = obj.getAsJsonArray("jars") ?: new JsonArray()
                    JsonObject apiJarObject = new JsonObject()
                    def apiJarTask = project.tasks.getByName("apiJar")
                    //noinspection GroovyAssignabilityCheck
                    apiJarObject.addProperty("file", "META-INF/libraries/" + apiJarTask.archivePath.name)
                    jarsArray.add(apiJarObject)
                    content.add("jars", jarsArray)
                }
            }
            file.text = gson.toJson(content)
        }
    }
}

license {
    header = file("code_quality/${project.license_header}_HEADER.txt")
    // Apply licenses only to main source set
    sourceSets = [project.sourceSets.main]
    include "**/*.java"
    charset = StandardCharsets.UTF_8.name()

    style {
        java = "BLOCK_COMMENT"
    }
    newLine = false // Disables the empty line between the header and package name
    //ignoreFailures = true //Ignore failures and only print a warning on license violations

    //export variables
    ext {
        year = Year.now()
        projectDisplayName = project.archivesBaseName
    }
}
