import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.google.gson.*
import com.modrinth.minotaur.TaskModrinthUpload
import net.fabricmc.loom.task.RemapJarTask

import java.nio.charset.StandardCharsets
import java.time.Year

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.google.code.gson:gson:2.8.6"
    }
}

plugins {
    id "fabric-loom" version "0.9.+"
    id "org.cadixdev.licenser" version "0.6.1"
    id "maven-publish"
    id "java-library"
    id "org.inferred.processors" version "3.3.0"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "com.modrinth.minotaur" version "1.1.0"
}

def ENV = System.getenv()
def buildTime = ENV.BUILD_TIME ?: new Date().format('yyyyMMddHHmmss')

group = "dev.upcraft"
archivesBaseName = "Mesh"

boolean isPreviewBuild = !ENV.TAG || ENV.TAG.matches(".+-.+")
def buildNumber = !ENV.TAG ? ("${ENV.BUILD_NUMBER ? "build.${ENV.BUILD_NUMBER}" : buildTime}-${project.minecraft_version}") : ""
version = (ENV.TAG ?: "development") + ((isPreviewBuild && !ENV.TAG) ? "+${buildNumber}" : "")

loom {
    accessWidenerPath.set(file("src/main/resources/mesh.accesswidener"))
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

configurations {
    annotations
    annotationsInclude
    annotationsDependency
}

sourceSets {
    annotations {
        java {
            compileClasspath += configurations.annotationsDependency
            runtimeClasspath += configurations.annotationsDependency
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter() // fiber2cloth; TODO remove
    maven {
        name = "Quilt" // mirror for modmenu
        url = "https://maven.quiltmc.org/repository/release"
    }
    maven {
        name = "Ladysnake Mods"
        url = "https://ladysnake.jfrog.io/artifactory/mods"
        content {
            includeGroup "io.github.ladysnake"
            includeGroupByRegex "io\\.github\\.onyxstudios.*"
        }
    }
    maven {
        url = "https://maven.shedaniel.me"
    }
    maven {
        name = "Nexus OSS Repository"
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    compileOnly 'org.jetbrains:annotations:21.0.1'
    modApi "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation(include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}")) {
        exclude group: 'net.fabricmc.fabric-api'
    }

    api include("me.zeroeightsix:fiber:${project.fiber_version}")
    implementation "blue.endless:jankson:${project.jankson_version}"
    modImplementation(include("me.shedaniel.cloth:fiber2cloth:${project.fiber2cloth_version}")) {
        transitive = false
        //exclude group: 'net.fabricmc.fabric-api'
        //exclude group: 'me.zeroeightsix', module: 'fiber'
    }

    annotationProcessor project(path: ":", configuration: "annotations")

    //testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0-M1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.0-M1'

    // dependencies for the annotation processor submodule
    annotationsDependency annotationsInclude("com.google.code.gson:gson:2.8.6")

    // compat
    modCompileOnly("io.github.ladysnake:requiem-api:${project.requiem_version}") {
        transitive = false
    }
}

task annotationsJar(type: ShadowJar) {
    archiveAppendix.set("Annotations")
    from("LICENSE.md") {
        rename { "LICENSE_${archiveBaseName.get()}-${archiveAppendix.get()}" }
    }
    from sourceSets.annotations.output
    from(sourceSets.annotations.resources) {
        include "META-INF/services/**"
    }
    configurations = [project.configurations.annotationsInclude]

}

task apiJar(type: Jar, dependsOn: classes) {
    archiveAppendix.set("API")
    from(sourceSets.main.output) {
        include String.valueOf(findProperty("api_package")).replace('.', '/') + "/**"
    }
    from("LICENSE.md") {
        rename { "LICENSE_${archiveBaseName.get()}-${archiveAppendix.get()}" }
    }
    from(sourceSets.main.resources) {
        inputs.property "version", project.version
        include 'api/**'
        expand "version": project.version
    }
    eachFile {
        if (it.path.startsWith("api/")) {
            it.path = it.path.substring(4)
        }
    }
    includeEmptyDirs false
    manifest.mainAttributes(
            "Implementation-Title": project.archivesBaseName + "-API",
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:api".toLowerCase(Locale.ROOT),
            "Built-On-Minecraft": project.minecraft_version,
            "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
    )
    archiveClassifier.set("dev")
}

task remapApiJar(type: RemapJarTask, dependsOn: apiJar) {
    input.set(apiJar.archiveFile.get())
    addNestedDependencies.set(false)
    archiveAppendix.set("API")
}

jar {
    dependsOn remapApiJar
    afterEvaluate {
        from(remapApiJar.archiveFile) {
            into "META-INF/jars"
        }
    }
    exclude String.valueOf(findProperty("api_package")).replace('.', '/') + "/**"
    exclude "api/**"

    from("LICENSE.md") {
        rename { "LICENSE_${archiveBaseName.get()}" }
    }

    manifest.mainAttributes(
            "Implementation-Title": project.archivesBaseName,
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}".toLowerCase(Locale.ROOT),
            "Built-On-Minecraft": project.minecraft_version,
            "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
    )
}

processResources {
    // this will ensure that this task is redone when there's a change
    inputs.property "version", project.version
    inputs.property "fabric_version", project.fabric_version
    inputs.property "api_jar", remapApiJar.archiveFileName.get()

    filteringCharset = "UTF-8"
    Gson gson = new GsonBuilder().disableHtmlEscaping().create()
    filesMatching("fabric.mod.json") {
        // add mod metadata
        expand "version": project.version
        def obj = gson.fromJson(new InputStreamReader(it.open()), JsonObject.class) //verify json integrity
        def depends = obj.getAsJsonObject("depends") ?: new JsonObject()
        depends.addProperty("fabric", "^${fabric_version}")
        if (gradle.taskGraph.hasTask(remapApiJar as Task)) {
            depends.addProperty("mesh_api", "${project.version}")

            def jarsArray = obj.getAsJsonArray("jars") ?: new JsonArray()
            def apiJarObject = new JsonObject()
            apiJarObject.addProperty("file", "META-INF/jars/${remapApiJar.archiveFileName.get()}")
            jarsArray.add(apiJarObject)
            obj.add("jars", jarsArray)
        }
        if (!depends.keySet().isEmpty()) {
            obj.add("depends", depends)
        }
        // FIXME does not work
        //it.file.text = gson.toJson(obj)
    }

    // copy everything else, that's not the fabric.mod.json
    //from(sourceSets.main.resources.srcDirs) {
    //    include "**/*.mcmeta"
    //    include "**/*.json"
    //    exclude "fabric.mod.json"
    //}

    doLast {

        // Minify json resources
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
            def element = gson.fromJson((String) file.text, JsonElement.class) //verify json integrity
            //file.text = gson.toJson(element)
        }
    }

    rename '(.+).accesswidener', 'META-INF/$1.aww'
}

license {
    header = file("code_quality/${project.license_header}_HEADER.txt")
    // Apply licenses only to main source set
    include "**/*.java"
    charset = StandardCharsets.UTF_8.name()

    //FIXME style block is broken
    //see https://github.com/Minecrell/licenser/issues/10
    //style {
    //    java = "BLOCK_COMMENT"
    //}
    newLine = false // remove the empty line between header and package name
    //ignoreFailures = true //Ignore failures and only print a warning on license violations

    //export variables
    ext {
        year = Year.now()
        projectDisplayName = project.archivesBaseName
    }
}

artifacts {
    archives(remapJar)
    archives(apiJar) {
        builtBy remapApiJar
    }
    archives annotationsJar
    annotations annotationsJar
}

publishing {
    publications {
        mainJava(MavenPublication) {
            artifact(remapJar)
        }
        apiJava(MavenPublication) {
            artifact(remapApiJar)
            artifactId = "${remapApiJar.archiveBaseName.get()}-${remapApiJar.archiveAppendix.get()}"
        }
        annotationsJava(MavenPublication) {
            artifact(annotationsJar)
            artifactId = "${annotationsJar.archiveBaseName.get()}-${annotationsJar.archiveAppendix.get()}"
        }
    }

    repositories {
        if (ENV.MAVEN_UPLOAD_URL) {
            maven {
                url = ENV.MAVEN_UPLOAD_URL
                credentials {
                    username = ENV.MAVEN_UPLOAD_USER
                    password = ENV.MAVEN_UPLOAD_PASSWORD
                }
            }
        }
    }
}

task publishToModrinth(type: TaskModrinthUpload, dependsOn: assemble) {
    if (ENV.MODRINTH_TOKEN) {
        token = ENV.MODRINTH_TOKEN
    }
    projectId = project.modrinth_id
    uploadFile = remapJar
    versionNumber = ENV.TAG ?: version
    versionName = versionNumber // need this here because the Modrinth API doesn't do that by default
    releaseType = isPreviewBuild ? ((ENV.TAG && ENV.TAG.contains("-beta")) ? "beta" : "alpha") : "release"
    "${project.modrinth_game_versions}".split(",").each {
        addGameVersion(it)
    }
    addLoader("fabric")
}

if (ENV.MODRINTH_TOKEN) {
    tasks.publish.dependsOn(publishToModrinth)
}


test {
    useJUnitPlatform()
}
